------------
Rosco
https://github.com/yeco/rosco

------------

Rosco is a cross-platform library that is capable of communicating
with the Rover Modular Engine Management System (MEMS) via the ECU's diagnostic
port.

Currently, this library only supports the protocol used by MEMS version 1.6.

A special cable is required to connect to the ECU. This is detailed on the
following web site:

Mirror: https://github.com/yeco/rosco/blob/wiki/HardwareInterface.md

The library itself has no user interface and requires a front-end application
to display data. Included in this archive is a simple command line utility
(named "readmems") which uses the library to retrieve data and test actuators.
The MEMS project provides a graphical front-end:

https://github.com/yeco/mems


-------
License
-------
rosco is licensed under the GPL v3. See the file "LICENSE" for details.

----------
Disclaimer
----------
While this software has been shown to be reliable and is provided in good
faith, it is provided with ABSOLUTELY NO WARRANTY.

---------
Changelog
---------
0.1.7: Added support for more data fields
       Fixed win32 build
       Renamed library to "rosco"
0.1.1: Bugfix in initial connect sequence
0.1.0: Initial release

-------------
Compatibility
-------------
rosco has been tested under Linux (Ubuntu 14.04, AMD64), but can be
build from source on many different operating systems.

--------------------------------
Building the library from source
--------------------------------
The rosco library can be built using Linux, BSD, OS X, or Windows.

Note that the makefile generated by CMake will produce output appropriate for
the operating system. In Linux, the output is a dynamic shared object (DSO)
file, named something like "rosco.so.0.1.0". In Windows, the output is a DLL,
named something like "rosco.dll".

CMake can be obtained from www.cmake.org, and MinGW from www.mingw.org.


== Building for Linux / BSD / OS X ==

The following software is required:

* CMake (>= 2.8)
* gcc (or equivalent)
* make

From the directory containing the rosco source code, execute the
following:

$ cmake .
$ make
$ sudo make install

Running the 'make install' directive will copy the header files to /usr/include
and the shared library to /usr/lib. These directories can be changed by editing
CMakeLists.txt and re-running "cmake ." and "make install". You may want to do
this if you do not have superuser/administrator privileges on the machine.


== Building for Windows ==

A Windows build requires the following software:

* CMake (>= 2.8)
* MinGW

Note that the MinGW Project also provides "MSYS", which is a more complete GNU
environment; installation of MSYS is _not_ necessary to build rosco.

After CMake and MinGW are installed, run the following commands from a command
prompt in the directory containing the rosco source:

 cmake . -G "MinGW Makefiles"
 make
 make install

Note: the 'install' directive under Windows will copy the output DLL, readmems
executable, and header files to C:\mems-rosco by default. If the user running
the 'make install' step does not have write permissions at C:\, this step may
fail.

------------------------------------------------
Notes for those developing frontends to rosco
------------------------------------------------
Because Windows still uses legacy DOS names for certain devices (such as COM
ports), there are restrictions on how such devices may be manipulated by code.
In order to open COM ports beyond COM9, Windows I/O calls (such as CreateFile())
require use of the prefix "\\.\" on the device name, as in "\\.\COM10". (Also
note that the backslashes must be properly escaped where appropriate.)

(EOF)
